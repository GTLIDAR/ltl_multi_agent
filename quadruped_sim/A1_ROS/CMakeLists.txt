cmake_minimum_required(VERSION 3.0.2)
project(quadruped_ctrl)

## Compile as C++11, supported in ROS Kinetic and newer
#add_compile_options(-std=c++11)

set(CMAKE_BUILD_TYPE "Release")
#set(BUILD_TYPE_RELEASE True)
## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
  message_generation
  controller_manager
  genmsg
  joint_state_controller
  robot_state_publisher
  gazebo_ros
  std_msgs
  tf
  geometry_msgs
  sensor_msgs
  a1_description
  unitree_legged_msgs
  unitree_controller
  unitree_legged_real
)
find_package(gazebo REQUIRED)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a exec_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
add_message_files(
  FILES
  locomotion_status.msg
)

## Generate services in the 'srv' folder
add_service_files(
  FILES
  QuadrupedCmd.srv
)

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
generate_messages(
  DEPENDENCIES
  std_msgs
  geometry_msgs
  sensor_msgs
)


################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a exec_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS
  LIBRARIES
  CATKIN_DEPENDS roscpp rospy std_msgs message_runtime geometry_msgs sensor_msgs unitree_legged_msgs
  #DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
message(STATUS ${PROJECT_SOURCE_DIR})
include_directories(${catkin_INCLUDE_DIRS}
  include
  include/${PROJECT_NAME}
  src
    ${Boost_INCLUDE_DIR}
    ${catkin_INCLUDE_DIRS}
    ${GAZEBO_INCLUDE_DIRS}
)

include_directories("/usr/local/include/lcm/")
include_directories($ENV{CHEETAH_SOFTWARE_PATH}/robot/include)
include_directories($ENV{CHEETAH_SOFTWARE_PATH}/robot/include/rt)
include_directories($ENV{CHEETAH_SOFTWARE_PATH}/common/include/)
include_directories($ENV{CHEETAH_SOFTWARE_PATH}/common/FootstepPlanner)
include_directories($ENV{CHEETAH_SOFTWARE_PATH}/lcm-types/cpp)
include_directories($ENV{CHEETAH_SOFTWARE_PATH}/user/MIT_Controller)
include_directories($ENV{CHEETAH_SOFTWARE_PATH}/sim/include)
include_directories($ENV{CHEETAH_SOFTWARE_PATH}/third-party/qpOASES/include)
link_directories($ENV{CHEETAH_SOFTWARE_PATH}/build/robot/librobot.so)
link_directories($ENV{CHEETAH_SOFTWARE_PATH}/build/common/libbiomimetics.so)
link_directories($ENV{CHEETAH_SOFTWARE_PATH}/build/user/MIT_Controller/libuser_controller.so)
include_directories($ENV{UNITREE_LEGGED_SDK_PATH}/include
        $ENV{ALIENGO_SDK_PATH}/include)
link_directories($ENV{UNITREE_LEGGED_SDK_PATH}/lib)
link_directories($ENV{ALIENGO_SDK_PATH}/lib)
string(CONCAT LEGGED_SDK_NAME libunitree_legged_sdk_$ENV{UNITREE_PLATFORM}.so)
set(EXTRA_LIBS ${LEGGED_SDK_NAME} libaliengo_comm.so)


link_directories(${GAZEBO_LIBRARY_DIRS})

#Set already exists at the top of this file. Currently set to "Release"
#set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GAZEBO_CXX_FLAGS}")

#add_subdirectory(src/qpOASES)
#add_subdirectory(src/JCQP)
#add_subdirectory(src/osqp)
#add_subdirectory(src/third-party)

## Declare a C++ library
add_library(${PROJECT_NAME}
#  src/MPC_Ctrl/ConvexMPCLocomotion.cpp
#  src/MPC_Ctrl/Gait.cpp
#  src/MPC_Ctrl/SparseCMPC.cpp
#  src/MPC_Ctrl/SparseCMPC_Math.cpp
#  src/MPC_Ctrl/OsqpTriples.cpp
#  src/MPC_Ctrl/convexMPC_interface.cpp
#  src/MPC_Ctrl/SolverMPC.cpp
#  src/MPC_Ctrl/RobotState.cpp
#  src/Controllers/FootSwingTrajectory.cpp
#  src/Controllers/LegController.cpp
#  src/Controllers/DesiredStateCommand.cpp
#  src/Controllers/OrientationEstimator.cpp
#  src/Controllers/PositionVelocityEstimator.cpp
#  src/Controllers/SafetyChecker.cpp
#  src/Dynamics/Quadruped.cpp
#  src/Dynamics/FloatingBaseModel.cpp
#  src/GaitCtrller.cpp

  src/body.cpp
  src/Gazebo_interface.cpp
  src/convert.h
)

#If you include this, the main function will interfere with servo.cpp's main
#src/external_force.cpp
#src/move_publisher.cpp

target_link_libraries(${PROJECT_NAME}
        ${catkin_LIBRARIES}
        ${EXTRA_LIBS}
#        JCQP
#        qpOASES
#        osqp
#        Goldfarb_Optimizer
        "$ENV{CHEETAH_SOFTWARE_PATH}/build/user/MIT_Controller/libuser_controller.so"
        "$ENV{CHEETAH_SOFTWARE_PATH}/build/robot/librobot.so"
        "$ENV{CHEETAH_SOFTWARE_PATH}/build/common/libbiomimetics.so"
        lcm

    )

#add_library(unitreeFootContactPlugin SHARED plugin/foot_contact_plugin.cc)
#target_link_libraries(unitreeFootContactPlugin ${catkin_LIBRARIES} ${GAZEBO_LIBRARIES})
#
#add_library(unitreeDrawForcePlugin SHARED plugin/draw_force_plugin.cc)
#target_link_libraries(unitreeDrawForcePlugin ${catkin_LIBRARIES} ${GAZEBO_LIBRARIES})



#add_executable(unitree_external_force src/external_force.cpp)
#target_link_libraries(unitree_external_force ${catkin_LIBRARIES})

#add_executable(unitree_servo2 src/servo.cpp)
#target_link_libraries(unitree_servo2 ${PROJECT_NAME} ${catkin_LIBRARIES}
#)

add_executable(a1_servo src/main.cpp)
target_link_libraries(a1_servo ${PROJECT_NAME} ${catkin_LIBRARIES}
)

add_executable(locomotion_status_publisher src/locomotion_status_publisher.cpp)
target_link_libraries(locomotion_status_publisher ${PROJECT_NAME} ${catkin_LIBRARIES}
)

#add_executable(unitree_move_kinetic src/move_publisher.cpp)
#target_link_libraries(unitree_move_kinetic ${catkin_LIBRARIES})

# add_executable(mainController src/mainController.cpp)
# target_link_libraries(mainController ${catkin_LIBRARIES} ${PROJECT_NAME})
# add_dependencies(mainController ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
# add_executable(${PROJECT_NAME}_node src/ConvexMPC_node.cpp)

## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
# target_link_libraries(${PROJECT_NAME}_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
#catkin_install_python(PROGRAMS
#   scripts/walking_simulation.py
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_executables.html
# install(TARGETS ${PROJECT_NAME}_node
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark libraries for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_libraries.html
# install(TARGETS ${PROJECT_NAME}
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_ConvexMPC.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
install(
        DIRECTORY include/${PROJECT_NAME}/
        DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
        FILES_MATCHING PATTERN "*.h"
)
